// Code generated by protoc-gen-go. DO NOT EDIT.
// source: public.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindHostRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindHostRequest) Reset()         { *m = FindHostRequest{} }
func (m *FindHostRequest) String() string { return proto.CompactTextString(m) }
func (*FindHostRequest) ProtoMessage()    {}
func (*FindHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_413a91106d7bcce8, []int{0}
}

func (m *FindHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHostRequest.Unmarshal(m, b)
}
func (m *FindHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHostRequest.Marshal(b, m, deterministic)
}
func (m *FindHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHostRequest.Merge(m, src)
}
func (m *FindHostRequest) XXX_Size() int {
	return xxx_messageInfo_FindHostRequest.Size(m)
}
func (m *FindHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindHostRequest proto.InternalMessageInfo

func (m *FindHostRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*FindHostRequest)(nil), "server.FindHostRequest")
}

func init() {
	proto.RegisterFile("public.proto", fileDescriptor_413a91106d7bcce8)
}

var fileDescriptor_413a91106d7bcce8 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x4d, 0xca,
	0xc9, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d,
	0x92, 0xe2, 0xca, 0xcb, 0x4f, 0x49, 0x85, 0x88, 0x29, 0x29, 0x73, 0xf1, 0xbb, 0x65, 0xe6, 0xa5,
	0x78, 0xe4, 0x17, 0x97, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x70, 0x31, 0x67,
	0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x46, 0x3e, 0x5c, 0xfc, 0xae,
	0x15, 0x25, 0xa9, 0x45, 0x79, 0x89, 0x39, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x96,
	0x5c, 0x7c, 0x30, 0x7d, 0x6e, 0xf9, 0x45, 0xde, 0xa9, 0x95, 0x42, 0xe2, 0x7a, 0x10, 0xe3, 0xf5,
	0xd0, 0xcc, 0x93, 0xe2, 0x81, 0x49, 0xf8, 0xe5, 0xa7, 0xa4, 0x2a, 0x31, 0x38, 0x29, 0x47, 0x29,
	0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x97, 0x24, 0x66, 0x16, 0x67,
	0xe4, 0x9b, 0x19, 0x1b, 0x5b, 0xea, 0xa7, 0xe7, 0x17, 0xa5, 0xe8, 0x43, 0xd4, 0x26, 0xb1, 0x81,
	0x9d, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x3b, 0x6d, 0x53, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExternalServiceClient is the client API for ExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExternalServiceClient interface {
	FindHostForKey(ctx context.Context, in *FindHostRequest, opts ...grpc.CallOption) (*Node, error)
}

type externalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalServiceClient(cc grpc.ClientConnInterface) ExternalServiceClient {
	return &externalServiceClient{cc}
}

func (c *externalServiceClient) FindHostForKey(ctx context.Context, in *FindHostRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/server.ExternalService/FindHostForKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServiceServer is the server API for ExternalService service.
type ExternalServiceServer interface {
	FindHostForKey(context.Context, *FindHostRequest) (*Node, error)
}

// UnimplementedExternalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExternalServiceServer struct {
}

func (*UnimplementedExternalServiceServer) FindHostForKey(ctx context.Context, req *FindHostRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHostForKey not implemented")
}

func RegisterExternalServiceServer(s *grpc.Server, srv ExternalServiceServer) {
	s.RegisterService(&_ExternalService_serviceDesc, srv)
}

func _ExternalService_FindHostForKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).FindHostForKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.ExternalService/FindHostForKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).FindHostForKey(ctx, req.(*FindHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.ExternalService",
	HandlerType: (*ExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindHostForKey",
			Handler:    _ExternalService_FindHostForKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
