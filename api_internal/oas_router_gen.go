// Code generated by ogen, DO NOT EDIT.

package api_internal

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/server.ExternalService/"
			if l := len("/server.ExternalService/"); len(elem) >= l && elem[0:l] == "/server.ExternalService/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'D': // Prefix: "DeleteValue"
				if l := len("DeleteValue"); len(elem) >= l && elem[0:l] == "DeleteValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleExternalServiceDeleteValueRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'F': // Prefix: "FindHostForKey"
				if l := len("FindHostForKey"); len(elem) >= l && elem[0:l] == "FindHostForKey" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleExternalServiceFindHostForKeyRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'G': // Prefix: "GetValue"
				if l := len("GetValue"); len(elem) >= l && elem[0:l] == "GetValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleExternalServiceGetValueRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'P': // Prefix: "PutValue"
				if l := len("PutValue"); len(elem) >= l && elem[0:l] == "PutValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleExternalServicePutValueRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/server.ExternalService/"
			if l := len("/server.ExternalService/"); len(elem) >= l && elem[0:l] == "/server.ExternalService/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'D': // Prefix: "DeleteValue"
				if l := len("DeleteValue"); len(elem) >= l && elem[0:l] == "DeleteValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ExternalServiceDeleteValue
						r.name = "ExternalServiceDeleteValue"
						r.summary = ""
						r.operationID = "ExternalService_DeleteValue"
						r.pathPattern = "/server.ExternalService/DeleteValue"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'F': // Prefix: "FindHostForKey"
				if l := len("FindHostForKey"); len(elem) >= l && elem[0:l] == "FindHostForKey" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ExternalServiceFindHostForKey
						r.name = "ExternalServiceFindHostForKey"
						r.summary = ""
						r.operationID = "ExternalService_FindHostForKey"
						r.pathPattern = "/server.ExternalService/FindHostForKey"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'G': // Prefix: "GetValue"
				if l := len("GetValue"); len(elem) >= l && elem[0:l] == "GetValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ExternalServiceGetValue
						r.name = "ExternalServiceGetValue"
						r.summary = ""
						r.operationID = "ExternalService_GetValue"
						r.pathPattern = "/server.ExternalService/GetValue"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'P': // Prefix: "PutValue"
				if l := len("PutValue"); len(elem) >= l && elem[0:l] == "PutValue" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ExternalServicePutValue
						r.name = "ExternalServicePutValue"
						r.summary = ""
						r.operationID = "ExternalService_PutValue"
						r.pathPattern = "/server.ExternalService/PutValue"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}
