// Code generated by ogen, DO NOT EDIT.

package api_internal

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// ExternalServiceDeleteValueParams is parameters of ExternalService_DeleteValue operation.
type ExternalServiceDeleteValueParams struct {
	Key OptString
}

func unpackExternalServiceDeleteValueParams(packed middleware.Parameters) (params ExternalServiceDeleteValueParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeExternalServiceDeleteValueParams(args [0]string, argsEscaped bool, r *http.Request) (params ExternalServiceDeleteValueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ExternalServiceFindHostForKeyParams is parameters of ExternalService_FindHostForKey operation.
type ExternalServiceFindHostForKeyParams struct {
	Key OptString
}

func unpackExternalServiceFindHostForKeyParams(packed middleware.Parameters) (params ExternalServiceFindHostForKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeExternalServiceFindHostForKeyParams(args [0]string, argsEscaped bool, r *http.Request) (params ExternalServiceFindHostForKeyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ExternalServiceGetValueParams is parameters of ExternalService_GetValue operation.
type ExternalServiceGetValueParams struct {
	Key OptString
}

func unpackExternalServiceGetValueParams(packed middleware.Parameters) (params ExternalServiceGetValueParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeExternalServiceGetValueParams(args [0]string, argsEscaped bool, r *http.Request) (params ExternalServiceGetValueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ExternalServicePutValueParams is parameters of ExternalService_PutValue operation.
type ExternalServicePutValueParams struct {
	Key   OptString
	Value OptString
}

func unpackExternalServicePutValueParams(packed middleware.Parameters) (params ExternalServicePutValueParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Value = v.(OptString)
		}
	}
	return params
}

func decodeExternalServicePutValueParams(args [0]string, argsEscaped bool, r *http.Request) (params ExternalServicePutValueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "value",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotValueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotValueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Value.SetTo(paramsDotValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "value",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
