// Code generated by ogen, DO NOT EDIT.

package api_internal

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// InternalServiceDeleteValueInnerParams is parameters of InternalService_DeleteValueInner operation.
type InternalServiceDeleteValueInnerParams struct {
	Key OptString
}

func unpackInternalServiceDeleteValueInnerParams(packed middleware.Parameters) (params InternalServiceDeleteValueInnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeInternalServiceDeleteValueInnerParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceDeleteValueInnerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServiceFindClosestPrecedingNodeParams is parameters of InternalService_FindClosestPrecedingNode operation.
type InternalServiceFindClosestPrecedingNodeParams struct {
	ID []byte
}

func unpackInternalServiceFindClosestPrecedingNodeParams(packed middleware.Parameters) (params InternalServiceFindClosestPrecedingNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]byte)
		}
	}
	return params
}

func decodeInternalServiceFindClosestPrecedingNodeParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceFindClosestPrecedingNodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServiceFindSuccessorByListParams is parameters of InternalService_FindSuccessorByList operation.
type InternalServiceFindSuccessorByListParams struct {
	ID []byte
}

func unpackInternalServiceFindSuccessorByListParams(packed middleware.Parameters) (params InternalServiceFindSuccessorByListParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]byte)
		}
	}
	return params
}

func decodeInternalServiceFindSuccessorByListParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceFindSuccessorByListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServiceFindSuccessorByTableParams is parameters of InternalService_FindSuccessorByTable operation.
type InternalServiceFindSuccessorByTableParams struct {
	ID []byte
}

func unpackInternalServiceFindSuccessorByTableParams(packed middleware.Parameters) (params InternalServiceFindSuccessorByTableParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]byte)
		}
	}
	return params
}

func decodeInternalServiceFindSuccessorByTableParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceFindSuccessorByTableParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServiceGetValueInnerParams is parameters of InternalService_GetValueInner operation.
type InternalServiceGetValueInnerParams struct {
	Key OptString
}

func unpackInternalServiceGetValueInnerParams(packed middleware.Parameters) (params InternalServiceGetValueInnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeInternalServiceGetValueInnerParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceGetValueInnerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServiceNotifyParams is parameters of InternalService_Notify operation.
type InternalServiceNotifyParams struct {
	Host OptString
}

func unpackInternalServiceNotifyParams(packed middleware.Parameters) (params InternalServiceNotifyParams) {
	{
		key := middleware.ParameterKey{
			Name: "host",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Host = v.(OptString)
		}
	}
	return params
}

func decodeInternalServiceNotifyParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServiceNotifyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: host.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "host",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHostVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotHostVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Host.SetTo(paramsDotHostVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "host",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// InternalServicePutValueInnerParams is parameters of InternalService_PutValueInner operation.
type InternalServicePutValueInnerParams struct {
	Key   OptString
	Value OptString
}

func unpackInternalServicePutValueInnerParams(packed middleware.Parameters) (params InternalServicePutValueInnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Value = v.(OptString)
		}
	}
	return params
}

func decodeInternalServicePutValueInnerParams(args [0]string, argsEscaped bool, r *http.Request) (params InternalServicePutValueInnerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "value",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotValueVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotValueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Value.SetTo(paramsDotValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "value",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
