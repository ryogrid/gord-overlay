// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package gordserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindHostRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindHostRequest) Reset()         { *m = FindHostRequest{} }
func (m *FindHostRequest) String() string { return proto.CompactTextString(m) }
func (*FindHostRequest) ProtoMessage()    {}
func (*FindHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{0}
}

func (m *FindHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindHostRequest.Unmarshal(m, b)
}
func (m *FindHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindHostRequest.Marshal(b, m, deterministic)
}
func (m *FindHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindHostRequest.Merge(m, src)
}
func (m *FindHostRequest) XXX_Size() int {
	return xxx_messageInfo_FindHostRequest.Size(m)
}
func (m *FindHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindHostRequest proto.InternalMessageInfo

func (m *FindHostRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FindRequest struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRequest) Reset()         { *m = FindRequest{} }
func (m *FindRequest) String() string { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()    {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{1}
}

func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRequest.Unmarshal(m, b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return xxx_messageInfo_FindRequest.Size(m)
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

func (m *FindRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type Node struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{2}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Node) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterType((*FindHostRequest)(nil), "gordserver.FindHostRequest")
	proto.RegisterType((*FindRequest)(nil), "gordserver.FindRequest")
	proto.RegisterType((*Node)(nil), "gordserver.Node")
}

func init() {
	proto.RegisterFile("chord.proto", fileDescriptor_541dae51990542ec)
}

var fileDescriptor_541dae51990542ec = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x5b, 0x6b, 0x1a, 0x41,
	0x14, 0xf6, 0x86, 0xe0, 0xd1, 0x5a, 0x19, 0x7a, 0x11, 0xa5, 0x50, 0xb6, 0x94, 0xf6, 0x69, 0x16,
	0xb4, 0xb4, 0x08, 0x7d, 0x69, 0x4d, 0x4c, 0x42, 0x40, 0x8c, 0xbe, 0xe5, 0x6d, 0x77, 0xe7, 0xb8,
	0x3b, 0xb8, 0xee, 0x31, 0x33, 0xb3, 0xc2, 0xfe, 0x88, 0xfc, 0xe7, 0x30, 0x6b, 0x16, 0x13, 0x73,
	0x01, 0xf3, 0x76, 0x98, 0xef, 0x72, 0xbe, 0xf3, 0x0d, 0x34, 0x83, 0x88, 0x94, 0xe0, 0x1b, 0x45,
	0x86, 0x18, 0x84, 0xa4, 0x84, 0x46, 0xb5, 0x45, 0xd5, 0xeb, 0x87, 0x44, 0x61, 0x8c, 0x6e, 0x8e,
	0xf8, 0xe9, 0xd2, 0xc5, 0xf5, 0xc6, 0x64, 0x3b, 0xa2, 0xf3, 0x0d, 0xde, 0x4f, 0x64, 0x22, 0xce,
	0x49, 0x9b, 0x39, 0xde, 0xa4, 0xa8, 0x0d, 0xeb, 0x40, 0x75, 0x85, 0x59, 0xb7, 0xfc, 0xb5, 0xfc,
	0xb3, 0x31, 0xb7, 0xa3, 0xf3, 0x05, 0x9a, 0x96, 0x54, 0x10, 0xda, 0x50, 0x91, 0x22, 0xc7, 0x5b,
	0xf3, 0x8a, 0x14, 0x0e, 0x87, 0xda, 0x94, 0x04, 0x32, 0x06, 0xb5, 0x88, 0xb4, 0xb9, 0x57, 0xe6,
	0xb3, 0x7d, 0xdb, 0x90, 0x32, 0xdd, 0xca, 0xee, 0xcd, 0xce, 0x83, 0x2b, 0x68, 0x8d, 0x6d, 0xd6,
	0x05, 0xaa, 0xad, 0x0c, 0x90, 0xfd, 0x83, 0x76, 0x91, 0x61, 0x42, 0xea, 0x12, 0x33, 0xd6, 0xe7,
	0xfb, 0xfc, 0xfc, 0x20, 0x5f, 0xaf, 0xf3, 0x10, 0xb4, 0x8b, 0x9d, 0xd2, 0xe0, 0xb6, 0x0a, 0x1f,
	0x72, 0xcf, 0x8b, 0xc4, 0xa0, 0x4a, 0xbc, 0xb8, 0xf0, 0xfe, 0x03, 0x8d, 0x45, 0x1a, 0x04, 0xa8,
	0x35, 0x29, 0xf6, 0x89, 0xef, 0xaa, 0xe0, 0x45, 0x15, 0xfc, 0xd4, 0x56, 0xf1, 0x9c, 0x23, 0x1b,
	0x41, 0x73, 0xa6, 0x50, 0xe0, 0x1b, 0xa4, 0x7f, 0xe1, 0x9d, 0xcd, 0xbc, 0xdf, 0xfb, 0xf9, 0xf0,
	0x9c, 0x57, 0x4e, 0x61, 0x27, 0xf0, 0xf1, 0x91, 0x7a, 0xe2, 0xc5, 0xb1, 0xef, 0x05, 0xab, 0xe3,
	0x5c, 0xce, 0xa0, 0x6b, 0x29, 0xe3, 0x98, 0x34, 0x6a, 0x33, 0x53, 0x18, 0xa0, 0x90, 0x49, 0x98,
	0xff, 0xd3, 0x51, 0x46, 0xbf, 0xa0, 0x3e, 0x25, 0x23, 0x97, 0x19, 0x7b, 0x82, 0xf6, 0x5e, 0x28,
	0xc5, 0x29, 0xfd, 0xff, 0x71, 0xfd, 0x3d, 0x94, 0x26, 0x4a, 0x7d, 0x1e, 0xd0, 0xda, 0x35, 0x9e,
	0xd4, 0x11, 0xfd, 0x1e, 0x0e, 0x47, 0xae, 0xb5, 0x70, 0xf7, 0x3e, 0x7e, 0x3d, 0x97, 0x0e, 0xef,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x84, 0xe2, 0xe4, 0x10, 0xbe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChordServiceClient is the client API for ChordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordServiceClient interface {
	FindHostForKey(ctx context.Context, in *FindHostRequest, opts ...grpc.CallOption) (*Node, error)
}

type chordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChordServiceClient(cc grpc.ClientConnInterface) ChordServiceClient {
	return &chordServiceClient{cc}
}

func (c *chordServiceClient) FindHostForKey(ctx context.Context, in *FindHostRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordService/FindHostForKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServiceServer is the server API for ChordService service.
type ChordServiceServer interface {
	FindHostForKey(context.Context, *FindHostRequest) (*Node, error)
}

// UnimplementedChordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChordServiceServer struct {
}

func (*UnimplementedChordServiceServer) FindHostForKey(ctx context.Context, req *FindHostRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHostForKey not implemented")
}

func RegisterChordServiceServer(s *grpc.Server, srv ChordServiceServer) {
	s.RegisterService(&_ChordService_serviceDesc, srv)
}

func _ChordService_FindHostForKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindHostForKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordService/FindHostForKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindHostForKey(ctx, req.(*FindHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gordserver.ChordService",
	HandlerType: (*ChordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindHostForKey",
			Handler:    _ChordService_FindHostForKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}

// ChordInternalServiceClient is the client API for ChordInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordInternalServiceClient interface {
	Successor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error)
	Predecessor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error)
	FindSuccessor(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error)
	FindSuccessorFallback(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error)
	FindClosestPrecedingNode(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error)
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chordInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChordInternalServiceClient(cc grpc.ClientConnInterface) ChordInternalServiceClient {
	return &chordInternalServiceClient{cc}
}

func (c *chordInternalServiceClient) Successor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/Successor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordInternalServiceClient) Predecessor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/Predecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordInternalServiceClient) FindSuccessor(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordInternalServiceClient) FindSuccessorFallback(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/FindSuccessorFallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordInternalServiceClient) FindClosestPrecedingNode(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/FindClosestPrecedingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordInternalServiceClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gordserver.ChordInternalService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordInternalServiceServer is the server API for ChordInternalService service.
type ChordInternalServiceServer interface {
	Successor(context.Context, *empty.Empty) (*Node, error)
	Predecessor(context.Context, *empty.Empty) (*Node, error)
	FindSuccessor(context.Context, *FindRequest) (*Node, error)
	FindSuccessorFallback(context.Context, *FindRequest) (*Node, error)
	FindClosestPrecedingNode(context.Context, *FindRequest) (*Node, error)
	Notify(context.Context, *Node) (*empty.Empty, error)
}

// UnimplementedChordInternalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChordInternalServiceServer struct {
}

func (*UnimplementedChordInternalServiceServer) Successor(ctx context.Context, req *empty.Empty) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Successor not implemented")
}
func (*UnimplementedChordInternalServiceServer) Predecessor(ctx context.Context, req *empty.Empty) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predecessor not implemented")
}
func (*UnimplementedChordInternalServiceServer) FindSuccessor(ctx context.Context, req *FindRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (*UnimplementedChordInternalServiceServer) FindSuccessorFallback(ctx context.Context, req *FindRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessorFallback not implemented")
}
func (*UnimplementedChordInternalServiceServer) FindClosestPrecedingNode(ctx context.Context, req *FindRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClosestPrecedingNode not implemented")
}
func (*UnimplementedChordInternalServiceServer) Notify(ctx context.Context, req *Node) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func RegisterChordInternalServiceServer(s *grpc.Server, srv ChordInternalServiceServer) {
	s.RegisterService(&_ChordInternalService_serviceDesc, srv)
}

func _ChordInternalService_Successor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).Successor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/Successor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).Successor(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordInternalService_Predecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).Predecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/Predecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).Predecessor(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordInternalService_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).FindSuccessor(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordInternalService_FindSuccessorFallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).FindSuccessorFallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/FindSuccessorFallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).FindSuccessorFallback(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordInternalService_FindClosestPrecedingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).FindClosestPrecedingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/FindClosestPrecedingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).FindClosestPrecedingNode(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordInternalService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordInternalServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gordserver.ChordInternalService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordInternalServiceServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChordInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gordserver.ChordInternalService",
	HandlerType: (*ChordInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Successor",
			Handler:    _ChordInternalService_Successor_Handler,
		},
		{
			MethodName: "Predecessor",
			Handler:    _ChordInternalService_Predecessor_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _ChordInternalService_FindSuccessor_Handler,
		},
		{
			MethodName: "FindSuccessorFallback",
			Handler:    _ChordInternalService_FindSuccessorFallback_Handler,
		},
		{
			MethodName: "FindClosestPrecedingNode",
			Handler:    _ChordInternalService_FindClosestPrecedingNode_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ChordInternalService_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
