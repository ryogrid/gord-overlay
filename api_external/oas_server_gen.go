// Code generated by ogen, DO NOT EDIT.

package api_external

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ExternalServiceDeleteValue implements ExternalService_DeleteValue operation.
	//
	// POST /server.ExternalService/DeleteValue
	ExternalServiceDeleteValue(ctx context.Context, params ExternalServiceDeleteValueParams) error
	// ExternalServiceFindHostForKey implements ExternalService_FindHostForKey operation.
	//
	// POST /server.ExternalService/FindHostForKey
	ExternalServiceFindHostForKey(ctx context.Context, params ExternalServiceFindHostForKeyParams) error
	// ExternalServiceGetValue implements ExternalService_GetValue operation.
	//
	// POST /server.ExternalService/GetValue
	ExternalServiceGetValue(ctx context.Context, params ExternalServiceGetValueParams) error
	// ExternalServicePutValue implements ExternalService_PutValue operation.
	//
	// POST /server.ExternalService/PutValue
	ExternalServicePutValue(ctx context.Context, params ExternalServicePutValueParams) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
