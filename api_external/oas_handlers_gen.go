// Code generated by ogen, DO NOT EDIT.

package api_external

import (
	"context"
	"net/http"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
)

// handleExternalServiceDeleteValueRequest handles ExternalService_DeleteValue operation.
//
// POST /server.ExternalService/DeleteValue
func (s *Server) handleExternalServiceDeleteValueRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ExternalService_DeleteValue"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/server.ExternalService/DeleteValue"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "ExternalServiceDeleteValue",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "ExternalServiceDeleteValue",
			ID:   "ExternalService_DeleteValue",
		}
	)
	params, err := decodeExternalServiceDeleteValueParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response *ExternalServiceDeleteValueOK
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "ExternalServiceDeleteValue",
			OperationSummary: "",
			OperationID:      "ExternalService_DeleteValue",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "key",
					In:   "query",
				}: params.Key,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = ExternalServiceDeleteValueParams
			Response = *ExternalServiceDeleteValueOK
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackExternalServiceDeleteValueParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				err = s.h.ExternalServiceDeleteValue(ctx, params)
				return response, err
			},
		)
	} else {
		err = s.h.ExternalServiceDeleteValue(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeExternalServiceDeleteValueResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleExternalServiceFindHostForKeyRequest handles ExternalService_FindHostForKey operation.
//
// POST /server.ExternalService/FindHostForKey
func (s *Server) handleExternalServiceFindHostForKeyRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ExternalService_FindHostForKey"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/server.ExternalService/FindHostForKey"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "ExternalServiceFindHostForKey",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "ExternalServiceFindHostForKey",
			ID:   "ExternalService_FindHostForKey",
		}
	)
	params, err := decodeExternalServiceFindHostForKeyParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response *ExternalServiceFindHostForKeyOK
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "ExternalServiceFindHostForKey",
			OperationSummary: "",
			OperationID:      "ExternalService_FindHostForKey",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "key",
					In:   "query",
				}: params.Key,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = ExternalServiceFindHostForKeyParams
			Response = *ExternalServiceFindHostForKeyOK
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackExternalServiceFindHostForKeyParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				err = s.h.ExternalServiceFindHostForKey(ctx, params)
				return response, err
			},
		)
	} else {
		err = s.h.ExternalServiceFindHostForKey(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeExternalServiceFindHostForKeyResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleExternalServiceGetValueRequest handles ExternalService_GetValue operation.
//
// POST /server.ExternalService/GetValue
func (s *Server) handleExternalServiceGetValueRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ExternalService_GetValue"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/server.ExternalService/GetValue"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "ExternalServiceGetValue",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "ExternalServiceGetValue",
			ID:   "ExternalService_GetValue",
		}
	)
	params, err := decodeExternalServiceGetValueParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response *ExternalServiceGetValueOK
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "ExternalServiceGetValue",
			OperationSummary: "",
			OperationID:      "ExternalService_GetValue",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "key",
					In:   "query",
				}: params.Key,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = ExternalServiceGetValueParams
			Response = *ExternalServiceGetValueOK
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackExternalServiceGetValueParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				err = s.h.ExternalServiceGetValue(ctx, params)
				return response, err
			},
		)
	} else {
		err = s.h.ExternalServiceGetValue(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeExternalServiceGetValueResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleExternalServicePutValueRequest handles ExternalService_PutValue operation.
//
// POST /server.ExternalService/PutValue
func (s *Server) handleExternalServicePutValueRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ExternalService_PutValue"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/server.ExternalService/PutValue"),
	}

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "ExternalServicePutValue",
		trace.WithAttributes(otelAttrs...),
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		// Use floating point division here for higher precision (instead of Millisecond method).
		s.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	var (
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "ExternalServicePutValue",
			ID:   "ExternalService_PutValue",
		}
	)
	params, err := decodeExternalServicePutValueParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response *ExternalServicePutValueOK
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "ExternalServicePutValue",
			OperationSummary: "",
			OperationID:      "ExternalService_PutValue",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "key",
					In:   "query",
				}: params.Key,
				{
					Name: "value",
					In:   "query",
				}: params.Value,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = ExternalServicePutValueParams
			Response = *ExternalServicePutValueOK
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackExternalServicePutValueParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				err = s.h.ExternalServicePutValue(ctx, params)
				return response, err
			},
		)
	} else {
		err = s.h.ExternalServicePutValue(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeExternalServicePutValueResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
